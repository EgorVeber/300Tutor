// Generated by view binder compiler. Do not edit!
package org.threehundredtutor.ui_core.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Group;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.progressindicator.LinearProgressIndicator;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.threehundredtutor.ui_core.R;

public final class SolutionHistoryItemV2Binding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView endTestDateTv;

  @NonNull
  public final Group groupEndDate;

  @NonNull
  public final Group groupIndicator;

  @NonNull
  public final Group groupNotFinished;

  @NonNull
  public final Group groupValidation;

  @NonNull
  public final LinearProgressIndicator indicatorIssuesResolvedPercent;

  @NonNull
  public final LinearProgressIndicator indicatorPointTestIsSolvedPercentTv;

  @NonNull
  public final LinearProgressIndicator indicatorPointWithTest;

  @NonNull
  public final TextView issuesResolvedPercent;

  @NonNull
  public final TextView nameTestTv;

  @NonNull
  public final TextView pointWithTestTv;

  @NonNull
  public final View separatorDate;

  @NonNull
  public final TextView startTestDateTv;

  @NonNull
  public final ConstraintLayout subjectLlContainer;

  @NonNull
  public final TextView testIsSolvedPercentTv;

  @NonNull
  public final TextView tv1IndicatorPointWithTest;

  @NonNull
  public final TextView tv1IndicatorPointtestIsSolvedPercentTv;

  @NonNull
  public final TextView tv1indicatorIssuesResolvedPercent;

  @NonNull
  public final TextView tv2IndicatorPointWithTest;

  @NonNull
  public final TextView tv2IndicatorPointtestIsSolvedPercentTv;

  @NonNull
  public final TextView tv2indicatorIssuesResolvedPercent;

  private SolutionHistoryItemV2Binding(@NonNull ConstraintLayout rootView,
      @NonNull TextView endTestDateTv, @NonNull Group groupEndDate, @NonNull Group groupIndicator,
      @NonNull Group groupNotFinished, @NonNull Group groupValidation,
      @NonNull LinearProgressIndicator indicatorIssuesResolvedPercent,
      @NonNull LinearProgressIndicator indicatorPointTestIsSolvedPercentTv,
      @NonNull LinearProgressIndicator indicatorPointWithTest,
      @NonNull TextView issuesResolvedPercent, @NonNull TextView nameTestTv,
      @NonNull TextView pointWithTestTv, @NonNull View separatorDate,
      @NonNull TextView startTestDateTv, @NonNull ConstraintLayout subjectLlContainer,
      @NonNull TextView testIsSolvedPercentTv, @NonNull TextView tv1IndicatorPointWithTest,
      @NonNull TextView tv1IndicatorPointtestIsSolvedPercentTv,
      @NonNull TextView tv1indicatorIssuesResolvedPercent,
      @NonNull TextView tv2IndicatorPointWithTest,
      @NonNull TextView tv2IndicatorPointtestIsSolvedPercentTv,
      @NonNull TextView tv2indicatorIssuesResolvedPercent) {
    this.rootView = rootView;
    this.endTestDateTv = endTestDateTv;
    this.groupEndDate = groupEndDate;
    this.groupIndicator = groupIndicator;
    this.groupNotFinished = groupNotFinished;
    this.groupValidation = groupValidation;
    this.indicatorIssuesResolvedPercent = indicatorIssuesResolvedPercent;
    this.indicatorPointTestIsSolvedPercentTv = indicatorPointTestIsSolvedPercentTv;
    this.indicatorPointWithTest = indicatorPointWithTest;
    this.issuesResolvedPercent = issuesResolvedPercent;
    this.nameTestTv = nameTestTv;
    this.pointWithTestTv = pointWithTestTv;
    this.separatorDate = separatorDate;
    this.startTestDateTv = startTestDateTv;
    this.subjectLlContainer = subjectLlContainer;
    this.testIsSolvedPercentTv = testIsSolvedPercentTv;
    this.tv1IndicatorPointWithTest = tv1IndicatorPointWithTest;
    this.tv1IndicatorPointtestIsSolvedPercentTv = tv1IndicatorPointtestIsSolvedPercentTv;
    this.tv1indicatorIssuesResolvedPercent = tv1indicatorIssuesResolvedPercent;
    this.tv2IndicatorPointWithTest = tv2IndicatorPointWithTest;
    this.tv2IndicatorPointtestIsSolvedPercentTv = tv2IndicatorPointtestIsSolvedPercentTv;
    this.tv2indicatorIssuesResolvedPercent = tv2indicatorIssuesResolvedPercent;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static SolutionHistoryItemV2Binding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SolutionHistoryItemV2Binding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.solution_history_item_v2, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SolutionHistoryItemV2Binding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.endTestDateTv;
      TextView endTestDateTv = ViewBindings.findChildViewById(rootView, id);
      if (endTestDateTv == null) {
        break missingId;
      }

      id = R.id.groupEndDate;
      Group groupEndDate = ViewBindings.findChildViewById(rootView, id);
      if (groupEndDate == null) {
        break missingId;
      }

      id = R.id.groupIndicator;
      Group groupIndicator = ViewBindings.findChildViewById(rootView, id);
      if (groupIndicator == null) {
        break missingId;
      }

      id = R.id.groupNotFinished;
      Group groupNotFinished = ViewBindings.findChildViewById(rootView, id);
      if (groupNotFinished == null) {
        break missingId;
      }

      id = R.id.groupValidation;
      Group groupValidation = ViewBindings.findChildViewById(rootView, id);
      if (groupValidation == null) {
        break missingId;
      }

      id = R.id.indicatorIssuesResolvedPercent;
      LinearProgressIndicator indicatorIssuesResolvedPercent = ViewBindings.findChildViewById(rootView, id);
      if (indicatorIssuesResolvedPercent == null) {
        break missingId;
      }

      id = R.id.indicatorPointTestIsSolvedPercentTv;
      LinearProgressIndicator indicatorPointTestIsSolvedPercentTv = ViewBindings.findChildViewById(rootView, id);
      if (indicatorPointTestIsSolvedPercentTv == null) {
        break missingId;
      }

      id = R.id.indicatorPointWithTest;
      LinearProgressIndicator indicatorPointWithTest = ViewBindings.findChildViewById(rootView, id);
      if (indicatorPointWithTest == null) {
        break missingId;
      }

      id = R.id.issuesResolvedPercent;
      TextView issuesResolvedPercent = ViewBindings.findChildViewById(rootView, id);
      if (issuesResolvedPercent == null) {
        break missingId;
      }

      id = R.id.nameTestTv;
      TextView nameTestTv = ViewBindings.findChildViewById(rootView, id);
      if (nameTestTv == null) {
        break missingId;
      }

      id = R.id.pointWithTestTv;
      TextView pointWithTestTv = ViewBindings.findChildViewById(rootView, id);
      if (pointWithTestTv == null) {
        break missingId;
      }

      id = R.id.separatorDate;
      View separatorDate = ViewBindings.findChildViewById(rootView, id);
      if (separatorDate == null) {
        break missingId;
      }

      id = R.id.startTestDateTv;
      TextView startTestDateTv = ViewBindings.findChildViewById(rootView, id);
      if (startTestDateTv == null) {
        break missingId;
      }

      ConstraintLayout subjectLlContainer = (ConstraintLayout) rootView;

      id = R.id.testIsSolvedPercentTv;
      TextView testIsSolvedPercentTv = ViewBindings.findChildViewById(rootView, id);
      if (testIsSolvedPercentTv == null) {
        break missingId;
      }

      id = R.id.tv1IndicatorPointWithTest;
      TextView tv1IndicatorPointWithTest = ViewBindings.findChildViewById(rootView, id);
      if (tv1IndicatorPointWithTest == null) {
        break missingId;
      }

      id = R.id.tv1IndicatorPointtestIsSolvedPercentTv;
      TextView tv1IndicatorPointtestIsSolvedPercentTv = ViewBindings.findChildViewById(rootView, id);
      if (tv1IndicatorPointtestIsSolvedPercentTv == null) {
        break missingId;
      }

      id = R.id.tv1indicatorIssuesResolvedPercent;
      TextView tv1indicatorIssuesResolvedPercent = ViewBindings.findChildViewById(rootView, id);
      if (tv1indicatorIssuesResolvedPercent == null) {
        break missingId;
      }

      id = R.id.tv2IndicatorPointWithTest;
      TextView tv2IndicatorPointWithTest = ViewBindings.findChildViewById(rootView, id);
      if (tv2IndicatorPointWithTest == null) {
        break missingId;
      }

      id = R.id.tv2IndicatorPointtestIsSolvedPercentTv;
      TextView tv2IndicatorPointtestIsSolvedPercentTv = ViewBindings.findChildViewById(rootView, id);
      if (tv2IndicatorPointtestIsSolvedPercentTv == null) {
        break missingId;
      }

      id = R.id.tv2indicatorIssuesResolvedPercent;
      TextView tv2indicatorIssuesResolvedPercent = ViewBindings.findChildViewById(rootView, id);
      if (tv2indicatorIssuesResolvedPercent == null) {
        break missingId;
      }

      return new SolutionHistoryItemV2Binding((ConstraintLayout) rootView, endTestDateTv,
          groupEndDate, groupIndicator, groupNotFinished, groupValidation,
          indicatorIssuesResolvedPercent, indicatorPointTestIsSolvedPercentTv,
          indicatorPointWithTest, issuesResolvedPercent, nameTestTv, pointWithTestTv, separatorDate,
          startTestDateTv, subjectLlContainer, testIsSolvedPercentTv, tv1IndicatorPointWithTest,
          tv1IndicatorPointtestIsSolvedPercentTv, tv1indicatorIssuesResolvedPercent,
          tv2IndicatorPointWithTest, tv2IndicatorPointtestIsSolvedPercentTv,
          tv2indicatorIssuesResolvedPercent);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
