// Generated by view binder compiler. Do not edit!
package org.threehundredtutor.ui_core.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.chip.Chip;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.threehundredtutor.ui_core.R;

public final class FragmentSolutionHistoryBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Chip allSolution;

  @NonNull
  public final Chip completedSolution;

  @NonNull
  public final Chip notCompletedSolution;

  @NonNull
  public final RecyclerView recyclerSolutionHistory;

  @NonNull
  public final MaterialToolbar solutionHistoryToolBar;

  @NonNull
  public final SwipeRefreshLayout swipeRefreshLayout;

  private FragmentSolutionHistoryBinding(@NonNull LinearLayout rootView, @NonNull Chip allSolution,
      @NonNull Chip completedSolution, @NonNull Chip notCompletedSolution,
      @NonNull RecyclerView recyclerSolutionHistory,
      @NonNull MaterialToolbar solutionHistoryToolBar,
      @NonNull SwipeRefreshLayout swipeRefreshLayout) {
    this.rootView = rootView;
    this.allSolution = allSolution;
    this.completedSolution = completedSolution;
    this.notCompletedSolution = notCompletedSolution;
    this.recyclerSolutionHistory = recyclerSolutionHistory;
    this.solutionHistoryToolBar = solutionHistoryToolBar;
    this.swipeRefreshLayout = swipeRefreshLayout;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentSolutionHistoryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentSolutionHistoryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_solution_history, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentSolutionHistoryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.allSolution;
      Chip allSolution = ViewBindings.findChildViewById(rootView, id);
      if (allSolution == null) {
        break missingId;
      }

      id = R.id.completedSolution;
      Chip completedSolution = ViewBindings.findChildViewById(rootView, id);
      if (completedSolution == null) {
        break missingId;
      }

      id = R.id.notCompletedSolution;
      Chip notCompletedSolution = ViewBindings.findChildViewById(rootView, id);
      if (notCompletedSolution == null) {
        break missingId;
      }

      id = R.id.recyclerSolutionHistory;
      RecyclerView recyclerSolutionHistory = ViewBindings.findChildViewById(rootView, id);
      if (recyclerSolutionHistory == null) {
        break missingId;
      }

      id = R.id.solutionHistoryToolBar;
      MaterialToolbar solutionHistoryToolBar = ViewBindings.findChildViewById(rootView, id);
      if (solutionHistoryToolBar == null) {
        break missingId;
      }

      id = R.id.swipeRefreshLayout;
      SwipeRefreshLayout swipeRefreshLayout = ViewBindings.findChildViewById(rootView, id);
      if (swipeRefreshLayout == null) {
        break missingId;
      }

      return new FragmentSolutionHistoryBinding((LinearLayout) rootView, allSolution,
          completedSolution, notCompletedSolution, recyclerSolutionHistory, solutionHistoryToolBar,
          swipeRefreshLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
