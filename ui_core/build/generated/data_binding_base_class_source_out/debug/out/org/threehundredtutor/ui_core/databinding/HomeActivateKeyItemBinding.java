// Generated by view binder compiler. Do not edit!
package org.threehundredtutor.ui_core.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.threehundredtutor.ui_core.R;

public final class HomeActivateKeyItemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextInputEditText activateKetEdt;

  @NonNull
  public final MaterialButton activateKeyBtn;

  @NonNull
  public final TextInputLayout activateKeyTil;

  private HomeActivateKeyItemBinding(@NonNull LinearLayout rootView,
      @NonNull TextInputEditText activateKetEdt, @NonNull MaterialButton activateKeyBtn,
      @NonNull TextInputLayout activateKeyTil) {
    this.rootView = rootView;
    this.activateKetEdt = activateKetEdt;
    this.activateKeyBtn = activateKeyBtn;
    this.activateKeyTil = activateKeyTil;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static HomeActivateKeyItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static HomeActivateKeyItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.home_activate_key_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static HomeActivateKeyItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.activateKetEdt;
      TextInputEditText activateKetEdt = ViewBindings.findChildViewById(rootView, id);
      if (activateKetEdt == null) {
        break missingId;
      }

      id = R.id.activateKeyBtn;
      MaterialButton activateKeyBtn = ViewBindings.findChildViewById(rootView, id);
      if (activateKeyBtn == null) {
        break missingId;
      }

      id = R.id.activateKeyTil;
      TextInputLayout activateKeyTil = ViewBindings.findChildViewById(rootView, id);
      if (activateKeyTil == null) {
        break missingId;
      }

      return new HomeActivateKeyItemBinding((LinearLayout) rootView, activateKetEdt, activateKeyBtn,
          activateKeyTil);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
