// Generated by view binder compiler. Do not edit!
package org.threehundredtutor.ui_core.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Group;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.threehundredtutor.ui_core.R;

public final class SolutionHistoryItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView endTestDateTv;

  @NonNull
  public final MaterialButton goButton;

  @NonNull
  public final Group groupEndDate;

  @NonNull
  public final Group groupNotFinished;

  @NonNull
  public final Group groupValidation;

  @NonNull
  public final TextView issuesResolvedPercent;

  @NonNull
  public final TextView nameTestTv;

  @NonNull
  public final TextView pointWithTestTv;

  @NonNull
  public final TextView questionCountTv;

  @NonNull
  public final View separatorDate;

  @NonNull
  public final TextView startTestDateTv;

  @NonNull
  public final ConstraintLayout subjectLlContainer;

  @NonNull
  public final TextView testIsSolvedPercentTv;

  private SolutionHistoryItemBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView endTestDateTv, @NonNull MaterialButton goButton,
      @NonNull Group groupEndDate, @NonNull Group groupNotFinished, @NonNull Group groupValidation,
      @NonNull TextView issuesResolvedPercent, @NonNull TextView nameTestTv,
      @NonNull TextView pointWithTestTv, @NonNull TextView questionCountTv,
      @NonNull View separatorDate, @NonNull TextView startTestDateTv,
      @NonNull ConstraintLayout subjectLlContainer, @NonNull TextView testIsSolvedPercentTv) {
    this.rootView = rootView;
    this.endTestDateTv = endTestDateTv;
    this.goButton = goButton;
    this.groupEndDate = groupEndDate;
    this.groupNotFinished = groupNotFinished;
    this.groupValidation = groupValidation;
    this.issuesResolvedPercent = issuesResolvedPercent;
    this.nameTestTv = nameTestTv;
    this.pointWithTestTv = pointWithTestTv;
    this.questionCountTv = questionCountTv;
    this.separatorDate = separatorDate;
    this.startTestDateTv = startTestDateTv;
    this.subjectLlContainer = subjectLlContainer;
    this.testIsSolvedPercentTv = testIsSolvedPercentTv;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static SolutionHistoryItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SolutionHistoryItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.solution_history_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SolutionHistoryItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.endTestDateTv;
      TextView endTestDateTv = ViewBindings.findChildViewById(rootView, id);
      if (endTestDateTv == null) {
        break missingId;
      }

      id = R.id.goButton;
      MaterialButton goButton = ViewBindings.findChildViewById(rootView, id);
      if (goButton == null) {
        break missingId;
      }

      id = R.id.groupEndDate;
      Group groupEndDate = ViewBindings.findChildViewById(rootView, id);
      if (groupEndDate == null) {
        break missingId;
      }

      id = R.id.groupNotFinished;
      Group groupNotFinished = ViewBindings.findChildViewById(rootView, id);
      if (groupNotFinished == null) {
        break missingId;
      }

      id = R.id.groupValidation;
      Group groupValidation = ViewBindings.findChildViewById(rootView, id);
      if (groupValidation == null) {
        break missingId;
      }

      id = R.id.issuesResolvedPercent;
      TextView issuesResolvedPercent = ViewBindings.findChildViewById(rootView, id);
      if (issuesResolvedPercent == null) {
        break missingId;
      }

      id = R.id.nameTestTv;
      TextView nameTestTv = ViewBindings.findChildViewById(rootView, id);
      if (nameTestTv == null) {
        break missingId;
      }

      id = R.id.pointWithTestTv;
      TextView pointWithTestTv = ViewBindings.findChildViewById(rootView, id);
      if (pointWithTestTv == null) {
        break missingId;
      }

      id = R.id.questionCountTv;
      TextView questionCountTv = ViewBindings.findChildViewById(rootView, id);
      if (questionCountTv == null) {
        break missingId;
      }

      id = R.id.separatorDate;
      View separatorDate = ViewBindings.findChildViewById(rootView, id);
      if (separatorDate == null) {
        break missingId;
      }

      id = R.id.startTestDateTv;
      TextView startTestDateTv = ViewBindings.findChildViewById(rootView, id);
      if (startTestDateTv == null) {
        break missingId;
      }

      ConstraintLayout subjectLlContainer = (ConstraintLayout) rootView;

      id = R.id.testIsSolvedPercentTv;
      TextView testIsSolvedPercentTv = ViewBindings.findChildViewById(rootView, id);
      if (testIsSolvedPercentTv == null) {
        break missingId;
      }

      return new SolutionHistoryItemBinding((ConstraintLayout) rootView, endTestDateTv, goButton,
          groupEndDate, groupNotFinished, groupValidation, issuesResolvedPercent, nameTestTv,
          pointWithTestTv, questionCountTv, separatorDate, startTestDateTv, subjectLlContainer,
          testIsSolvedPercentTv);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
