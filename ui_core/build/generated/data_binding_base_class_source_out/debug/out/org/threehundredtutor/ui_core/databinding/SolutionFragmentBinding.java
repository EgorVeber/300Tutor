// Generated by view binder compiler. Do not edit!
package org.threehundredtutor.ui_core.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.threehundredtutor.ui_core.R;

public final class SolutionFragmentBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final AppCompatImageView errorImageView;

  @NonNull
  public final MaterialButton finishButton;

  @NonNull
  public final FrameLayout finishContainer;

  @NonNull
  public final RecyclerView recyclerSolution;

  @NonNull
  public final ConstraintLayout rootContent;

  @NonNull
  public final MaterialButton showResultButton;

  @NonNull
  public final MaterialToolbar solutionToolBar;

  private SolutionFragmentBinding(@NonNull FrameLayout rootView,
      @NonNull AppCompatImageView errorImageView, @NonNull MaterialButton finishButton,
      @NonNull FrameLayout finishContainer, @NonNull RecyclerView recyclerSolution,
      @NonNull ConstraintLayout rootContent, @NonNull MaterialButton showResultButton,
      @NonNull MaterialToolbar solutionToolBar) {
    this.rootView = rootView;
    this.errorImageView = errorImageView;
    this.finishButton = finishButton;
    this.finishContainer = finishContainer;
    this.recyclerSolution = recyclerSolution;
    this.rootContent = rootContent;
    this.showResultButton = showResultButton;
    this.solutionToolBar = solutionToolBar;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static SolutionFragmentBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SolutionFragmentBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.solution_fragment, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SolutionFragmentBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.errorImageView;
      AppCompatImageView errorImageView = ViewBindings.findChildViewById(rootView, id);
      if (errorImageView == null) {
        break missingId;
      }

      id = R.id.finishButton;
      MaterialButton finishButton = ViewBindings.findChildViewById(rootView, id);
      if (finishButton == null) {
        break missingId;
      }

      id = R.id.finishContainer;
      FrameLayout finishContainer = ViewBindings.findChildViewById(rootView, id);
      if (finishContainer == null) {
        break missingId;
      }

      id = R.id.recyclerSolution;
      RecyclerView recyclerSolution = ViewBindings.findChildViewById(rootView, id);
      if (recyclerSolution == null) {
        break missingId;
      }

      id = R.id.rootContent;
      ConstraintLayout rootContent = ViewBindings.findChildViewById(rootView, id);
      if (rootContent == null) {
        break missingId;
      }

      id = R.id.showResultButton;
      MaterialButton showResultButton = ViewBindings.findChildViewById(rootView, id);
      if (showResultButton == null) {
        break missingId;
      }

      id = R.id.solutionToolBar;
      MaterialToolbar solutionToolBar = ViewBindings.findChildViewById(rootView, id);
      if (solutionToolBar == null) {
        break missingId;
      }

      return new SolutionFragmentBinding((FrameLayout) rootView, errorImageView, finishButton,
          finishContainer, recyclerSolution, rootContent, showResultButton, solutionToolBar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
