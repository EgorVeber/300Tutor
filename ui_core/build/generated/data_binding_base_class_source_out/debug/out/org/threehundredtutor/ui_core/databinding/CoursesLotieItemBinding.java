// Generated by view binder compiler. Do not edit!
package org.threehundredtutor.ui_core.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.threehundredtutor.ui_core.R;

public final class CoursesLotieItemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialButton chooseButton;

  @NonNull
  public final ImageView imageView;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final TextView surnameTitleTextView;

  private CoursesLotieItemBinding(@NonNull LinearLayout rootView,
      @NonNull MaterialButton chooseButton, @NonNull ImageView imageView,
      @NonNull LinearLayout linearLayout, @NonNull TextView surnameTitleTextView) {
    this.rootView = rootView;
    this.chooseButton = chooseButton;
    this.imageView = imageView;
    this.linearLayout = linearLayout;
    this.surnameTitleTextView = surnameTitleTextView;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CoursesLotieItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CoursesLotieItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.courses_lotie_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CoursesLotieItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.chooseButton;
      MaterialButton chooseButton = ViewBindings.findChildViewById(rootView, id);
      if (chooseButton == null) {
        break missingId;
      }

      id = R.id.imageView;
      ImageView imageView = ViewBindings.findChildViewById(rootView, id);
      if (imageView == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.surnameTitleTextView;
      TextView surnameTitleTextView = ViewBindings.findChildViewById(rootView, id);
      if (surnameTitleTextView == null) {
        break missingId;
      }

      return new CoursesLotieItemBinding((LinearLayout) rootView, chooseButton, imageView,
          linearLayout, surnameTitleTextView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
