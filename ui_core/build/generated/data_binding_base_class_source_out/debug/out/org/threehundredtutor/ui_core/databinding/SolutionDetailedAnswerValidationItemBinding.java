// Generated by view binder compiler. Do not edit!
package org.threehundredtutor.ui_core.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.threehundredtutor.ui_core.R;

public final class SolutionDetailedAnswerValidationItemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialButton estimateButton;

  @NonNull
  public final ImageView iconDelete;

  @NonNull
  public final TextInputEditText inputPointEditText;

  @NonNull
  public final TextInputLayout inputPointTextInputLayout;

  @NonNull
  public final MaterialButton needToCheckButton;

  @NonNull
  public final TextView pointQuestionTv;

  @NonNull
  public final MaterialButton resultButton;

  @NonNull
  public final TextView title;

  @NonNull
  public final TextInputEditText totalPointEditText;

  @NonNull
  public final TextInputLayout totalPointTextInputLayout;

  private SolutionDetailedAnswerValidationItemBinding(@NonNull LinearLayout rootView,
      @NonNull MaterialButton estimateButton, @NonNull ImageView iconDelete,
      @NonNull TextInputEditText inputPointEditText,
      @NonNull TextInputLayout inputPointTextInputLayout, @NonNull MaterialButton needToCheckButton,
      @NonNull TextView pointQuestionTv, @NonNull MaterialButton resultButton,
      @NonNull TextView title, @NonNull TextInputEditText totalPointEditText,
      @NonNull TextInputLayout totalPointTextInputLayout) {
    this.rootView = rootView;
    this.estimateButton = estimateButton;
    this.iconDelete = iconDelete;
    this.inputPointEditText = inputPointEditText;
    this.inputPointTextInputLayout = inputPointTextInputLayout;
    this.needToCheckButton = needToCheckButton;
    this.pointQuestionTv = pointQuestionTv;
    this.resultButton = resultButton;
    this.title = title;
    this.totalPointEditText = totalPointEditText;
    this.totalPointTextInputLayout = totalPointTextInputLayout;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static SolutionDetailedAnswerValidationItemBinding inflate(
      @NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SolutionDetailedAnswerValidationItemBinding inflate(
      @NonNull LayoutInflater inflater, @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.solution_detailed_answer_validation_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SolutionDetailedAnswerValidationItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.estimateButton;
      MaterialButton estimateButton = ViewBindings.findChildViewById(rootView, id);
      if (estimateButton == null) {
        break missingId;
      }

      id = R.id.iconDelete;
      ImageView iconDelete = ViewBindings.findChildViewById(rootView, id);
      if (iconDelete == null) {
        break missingId;
      }

      id = R.id.inputPointEditText;
      TextInputEditText inputPointEditText = ViewBindings.findChildViewById(rootView, id);
      if (inputPointEditText == null) {
        break missingId;
      }

      id = R.id.inputPointTextInputLayout;
      TextInputLayout inputPointTextInputLayout = ViewBindings.findChildViewById(rootView, id);
      if (inputPointTextInputLayout == null) {
        break missingId;
      }

      id = R.id.needToCheckButton;
      MaterialButton needToCheckButton = ViewBindings.findChildViewById(rootView, id);
      if (needToCheckButton == null) {
        break missingId;
      }

      id = R.id.pointQuestionTv;
      TextView pointQuestionTv = ViewBindings.findChildViewById(rootView, id);
      if (pointQuestionTv == null) {
        break missingId;
      }

      id = R.id.resultButton;
      MaterialButton resultButton = ViewBindings.findChildViewById(rootView, id);
      if (resultButton == null) {
        break missingId;
      }

      id = R.id.title;
      TextView title = ViewBindings.findChildViewById(rootView, id);
      if (title == null) {
        break missingId;
      }

      id = R.id.totalPointEditText;
      TextInputEditText totalPointEditText = ViewBindings.findChildViewById(rootView, id);
      if (totalPointEditText == null) {
        break missingId;
      }

      id = R.id.totalPointTextInputLayout;
      TextInputLayout totalPointTextInputLayout = ViewBindings.findChildViewById(rootView, id);
      if (totalPointTextInputLayout == null) {
        break missingId;
      }

      return new SolutionDetailedAnswerValidationItemBinding((LinearLayout) rootView,
          estimateButton, iconDelete, inputPointEditText, inputPointTextInputLayout,
          needToCheckButton, pointQuestionTv, resultButton, title, totalPointEditText,
          totalPointTextInputLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
